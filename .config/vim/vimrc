" fundamental settings
syntax on
set relativenumber
set number
set cursorline
set noerrorbells
set updatetime=50
set noshowmode
set nocompatible
set shortmess+=c
let leader = " "

" cursor settings
let &t_SI.="\e[5 q" "SI = INSERT mode
let &t_SR.="\e[4 q" "SR = REPLACE mode
let &t_EI.="\e[1 q" "EI = NORMAL mode

" temp file
set nobackup
set noswapfile
set undofile

" seaching setting
set incsearch
set hlsearch
set smartcase
set path+=**

" backspace
set backspace=eol,indent,start

" default intent
set tabstop=2
set softtabstop=2
set shiftwidth=2
set expandtab
set smartindent

" default GUI behavior
set nowrap
set modelines=0

" plugins
call plug#begin('~/.vim/plugged')
  " Design
  Plug 'vim-airline/vim-airline'
  "Theme
  Plug 'arcticicestudio/nord-vim'  

  " Command Plugins
  Plug 'tpope/vim-commentary'
  Plug 'tpope/vim-surround'

  " Git plugin
  Plug 'tpope/vim-fugitive'



  " Language server protocol'  
  Plug 'prabirshrestha/vim-lsp'  
  Plug 'prabirshrestha/asyncomplete.vim'
  Plug 'prabirshrestha/asyncomplete-lsp.vim'
 
call plug#end()

" eye candy settings
colorscheme nord

if !exists('g:airline_symbols')
  let g:airline_symbols = {}
endif

let g:airline_left_sep = ''
let g:airline_left_alt_sep = ''
let g:airline_right_sep = ''
let g:airline_right_alt_sep = ''
let g:airline_symbols.branch = ''
let g:airline_symbols.readonly = ''
let g:airline_symbols.crypto = ''
let g:airline_symbols.dirty='⚡'
let g:airline_section_z ='%#__accent_bold#%l/%L:%v%#__restore__#'


" Language Server protocol
function! s:on_lsp_buffer_enabled() abort
  setlocal omnifunc=lsp#complete
  setlocal signcolumn=yes
  
  if exists('+tagfunc') 
    setlocal tagfunc=lsp#tagfunc 
  endif
  nmap <buffer> <leader>fi <plug>(lsp-code-action)
  vmap <buffer> <leader>rf <plug>(lsp-document-range-format)
  nmap <buffer> <leader>rf <plag>(lsp-document-format)
  nmap <buffer> <leader>gd <plug>(lsp-definition)
  nmap <buffer> <leader>gr <plug>(lsp-references)
  nmap <buffer> <leader>gi <plug>(lsp-implementation)
  nmap <buffer> <leader>gt <plug>(lsp-type-definition)
  nmap <buffer> <leader>rn <plug>(lsp-rename)
  nmap <buffer> <leader>pd <Plug>(lsp-previous-diagnostic)
  nmap <buffer> <leader>nd <Plug>(lsp-next-diagnostic)
  nmap <buffer> <leader>h <Plug>(lsp-hover)
endfunction

augroup lsp_install
  au!
  autocmd User lsp_buffer_enabled call s:on_lsp_buffer_enabled()
augroup END 

let g:lsp_signs_error = {'text': '✖'}
let g:lsp_signs_warning = {'text': '⚠'}
let g:lsp_signs_hint = {'text': '〰'}
let g:lsp_diagnostics_enabled = 1
let g:lsp_diagnostics_echo_cursor = 1
let g:lsp_textprop_enabled = 0
let g:lsp_virtual_text_enabled = 0

" completion settings
inoremap <expr> <Tab>   pumvisible() ? "\<C-n>" : "\<Tab>"
inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"
inoremap <expr> <cr>    pumvisible() ? asyncomplete#close_popup() : "\<cr>"

"FuGITive
nmap <leader>gs :G<CR>
nmap <leader>gc :Gcommit<CR>
nmap <leader>gds :Gdiffsplit<CR>

